from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import requests
from app.—Åorrect_time import format_datetime_to_msk

from app.keyboards import start_keyboard, listener_keyboard, speaker_keyboard


router = Router()


class QuestionStates(StatesGroup):
    choosing_talk = State()
    writing_question = State()


@router.message(F.text == "/start")
async def start_command(message: Message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}! üôã‚Äç‚ôÇÔ∏è\n"
        "–Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é: –ø–æ–º–æ–≥—É –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –µ—Å–ª–∏ –≤—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, –ª–∏–±–æ –≤–æ–π–¥–∏—Ç–µ –µ—Å–ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—åüöÄ",
        reply_markup=start_keyboard
    )


@router.message(F.text == "/help")
async def help_command(message: Message):
    await message.answer(
        "–ù–∞–≤–∏–≥–∞—Ü–∏—è:\n\n"
        "1. \"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è\" ‚Äî –ü—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å.\n"
        "2. \"–Ø —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω\" ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∏ —Ä–æ–ª—å (—Å–ª—É—à–∞—Ç–µ–ª—å –∏–ª–∏ –¥–æ–∫–ª–∞–¥—á–∏–∫).\n"
        "3. \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é\" ‚Äî –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ–∫–ª–∞–¥–∞—Ö –∏ –¥–∞—Ç–µ/–≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.\n"
        "4. \"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\" ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–º—É –≤–∞—Å –¥–æ–∫–ª–∞–¥—É."
    )


@router.message(F.text == "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
async def register_user(message: Message):
    params = {
        "event_id": 10,
        "telegram_id": message.from_user.id,
        "name": message.from_user.full_name
    }
    response = requests.post('http://158.160.134.159:8000/api/event-registrations/', json=params)
    if response.status_code:
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å!", reply_markup=listener_keyboard)
    else:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}.\n{response.text}"
        )


@router.message(F.text == "–Ø —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
async def check_registration(message: Message):
    params = {
        "telegram_id": message.from_user.id
    }
    response = requests.get('http://158.160.134.159:8000/api/check-role/', params=params)
    if response.status_code:
        roles = response.json().get("roles", [])
        if "listener" in roles:
            await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ —Å–ª—É—à–∞—Ç–µ–ª—å!", reply_markup=listener_keyboard)
        elif "speaker" in roles:
            await message.answer("–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –¥–æ–∫–ª–∞–¥—á–∏–∫!", reply_markup=speaker_keyboard)


@router.message(F.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é")
async def event_program_info(message: Message):
    event_response = requests.get('http://158.160.134.159:8000/api/event-programs/')
    event_response.raise_for_status()
    events = event_response.json()

    if not events:
        await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    event = events[0]
    event_info = (
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event['title']}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event['description']}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {format_datetime_to_msk(event['start_date'])}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime_to_msk(event['end_date'])}\n\n"
    )

    talks_response = requests.get('http://158.160.134.159:8000/api/talks/')
    talks_response.raise_for_status()
    talks = talks_response.json()

    if talks:
        talks_info = "–î–æ–∫–ª–∞–¥—ã:\n"
        for talk in talks:
            talks_info += (
                f"- {talk['title']} (–°–ø–∏–∫–µ—Ä: {talk['speaker']})\n"
                f"  –í—Ä–µ–º—è: {format_datetime_to_msk(talk['start_time'])} ‚Äî {format_datetime_to_msk(talk['end_time'])}\n\n"
            )
    else:
        talks_info = "–î–æ–∫–ª–∞–¥—ã: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.\n"
    await message.answer(event_info + talks_info)


@router.message(F.text == "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question_start(message: Message, state: FSMContext):
    response = requests.get('http://158.160.134.159:8000/api/talks/')
    talks = response.json()
    if talks:
        keyboard_builder = InlineKeyboardBuilder()
        for talk in talks:
            button = InlineKeyboardButton(
                text=f"{talk['title']}",
                callback_data=f"talk_{talk['id']}"
            )
            keyboard_builder.row(button)

        keyboard = keyboard_builder.as_markup()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥:", reply_markup=keyboard)
        await state.set_state(QuestionStates.choosing_talk)
    else:
        await message.answer("–°–ø–∏—Å–æ–∫ –¥–æ–∫–ª–∞–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")


@router.callback_query(QuestionStates.choosing_talk, F.data.startswith('talk_'))
async def choose_talk(callback: CallbackQuery, state: FSMContext):
    talk_id = int(callback.data.split('_')[1])
    await state.update_data(talk_id=talk_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")
    await state.set_state(QuestionStates.writing_question)
    await callback.answer()


@router.message(QuestionStates.writing_question)
async def receive_question(message: Message, state: FSMContext):
    data = await state.get_data()
    talk_id = data.get("talk_id")
    user_id = message.from_user.id
    text = message.text

    telegram_username = message.from_user.username

    if telegram_username:
        text += f"\n–ö–æ–Ω—Ç–∞–∫—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: @{telegram_username}"
    else:
        text += "\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Å—Ç–∞–≤–∏–ª –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏."

    question_data = {
        "text": text,
        "talk": talk_id,
        "telegram_id": user_id
    }
    response = requests.post('http://158.160.134.159:8000/api/questions/', json=question_data)
    if response.status_code:
        await message.answer("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–æ–∫–ª–∞–¥—á–∏–∫—É.")
    else:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {response.status_code}.\n{response.text}"
        )
    await state.clear()


@router.message(F.text == "–ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã")
async def get_questions(message: Message):
    speaker_telegram_id = message.from_user.id

    talks_response = requests.get('http://158.160.134.159:8000/api/talks/')
    talks_response.raise_for_status()
    talks = talks_response.json()

    speaker_talks = [talk for talk in talks if talk.get('speaker_telegram_id') == speaker_telegram_id]
    if not speaker_talks:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–∫–ª–∞–¥–æ–≤.")
        return

    questions_response = requests.get('http://158.160.134.159:8000/api/questions/')
    questions_response.raise_for_status()
    questions = questions_response.json()

    speaker_talk_ids = [talk['id'] for talk in speaker_talks]

    speaker_questions = [q for q in questions if q['talk'] in speaker_talk_ids]

    if not speaker_questions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.")
        return

    for question in speaker_questions:
        talk_id = question['talk']
        talk = next((t for t in speaker_talks if t['id'] == talk_id), None)
        talk_title = talk['title']

        question_text = (
            f"–î–æ–∫–ª–∞–¥: {talk_title}\n"
            f"–í–æ–ø—Ä–æ—Å: {question['text']}"
        )
        await message.answer(question_text)
